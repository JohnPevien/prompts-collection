{
  "Smell Code": {
    "prompt": "Find code smells, potential bugs, and unhandled errors in my selected code. Create a list with the top five errors you can find, and include a short informative description and suggestion for each. Please only respond with the list of errors and nothing else.",
    "codeSelection": true,
    "codebase": false
  },
  "Improve variable names": {
    "prompt": "Suppose that you are writing code for a production level application which is shared by many developers in your team. Take the current code, and update the variable names so that it should improve the readability of the code and help the other developers maintain it without much difficulty.",
    "codeSelection": true,
    "codebase": false
  },
  "Refactor Large Components": {
    "prompt": "Identify any large React or Next.js components in the selected code. Break them into smaller, more focused components to improve readability, reusability, and testability. Only provide the updated component structure without extra commentary.",
    "codeSelection": true,
    "codebase": false
  },
  "Optimize Rendering": {
    "prompt": "Examine the code for unnecessary re-renders and recommend memoization strategies using React.memo or useMemo. Show exactly how you'd refactor the affected components to reduce rendering overhead.",
    "codeSelection": true,
    "codebase": false
  },
  "Clean Up CSS": {
    "prompt": "Check for redundant or repetitive CSS classes and refactor them using TailwindCSS or SCSS best practices. Provide only the refactored CSS or relevant markup changes without additional explanations.",
    "codeSelection": true,
    "codebase": false
  },
  "Streamline State Management": {
    "prompt": "Review the selected code for overly complex state management and suggest refactors using React hooks, context, or more efficient libraries. Show only the updated code where the state is handled more cleanly.",
    "codeSelection": true,
    "codebase": false
  },
  "Consolidate Repeated Logic": {
    "prompt": "Look for repeated logic patterns in the selected code and refactor them into shared helper functions or custom hooks. Provide only the updated code demonstrating the refactor without extra commentary.",
    "codeSelection": true,
    "codebase": false
  },
  "Minimize Use of Inline Styles": {
    "prompt": "Identify any inline styles used within your React components and refactor them to use either SCSS or TailwindCSS utility classes for improved consistency. Provide only the refactored code without commentary.",
    "codeSelection": true,
    "codebase": false
  },
  "Reduce Prop Drilling": {
    "prompt": "Identify where props are being passed down multiple levels. Refactor the code to reduce prop drilling, for instance by using React Context or custom hooks. Provide only the refactored code where the relevant changes are made, without commentary.",
    "codeSelection": true,
    "codebase": false
  },
  "Enhance Type Definitions": {
    "prompt": "Review the code for missing or incomplete type definitions (such as TypeScript types or JSDoc annotations) and add or refine them for improved readability and safety. Show only the updated type definitions without extra explanation.",
    "codeSelection": true,
    "codebase": false
  },
  "Simplify Nested Conditionals": {
    "prompt": "Look for deeply nested if-else statements or switch blocks in the selected code. Rewrite them using early returns, logical operators, or helper functions for clarity. Provide only the updated code.",
    "codeSelection": true,
    "codebase": false
  },
  "Use Ternary Operators": {
    "prompt": "Identify simple conditional checks that use verbose if-else blocks and refactor them into succinct ternary operators for readability. Provide only the refactored code.",
    "codeSelection": true,
    "codebase": false
  },
  "Convert Class Components to Functional": {
    "prompt": "Search for React class components in the selected code and refactor them to functional components where possible. Show only the updated functional components without commentary.",
    "codeSelection": true,
    "codebase": false
  },
  "Leverage Optional Chaining": {
    "prompt": "Replace manual checks for nested object properties with optional chaining (e.g., user?.profile?.address) to avoid errors and simplify code. Show only the updated code.",
    "codeSelection": true,
    "codebase": false
  },
  "Implement Early Returns": {
    "prompt": "Identify sections of code that rely on deeply nested logic and refactor them to exit early when conditions arenâ€™t met. Only provide the updated code demonstrating these changes.",
    "codeSelection": true,
    "codebase": false
  },
  "Adopt Strict Equality": {
    "prompt": "Locate any instances of loose equality (==) and replace them with strict equality (===) for better predictability. Show only the changes where the replacements are made.",
    "codeSelection": true,
    "codebase": false
  },
  "Extract Complex Functions": {
    "prompt": "Find any overly complex or lengthy functions and extract parts of them into smaller, reusable helper functions. Only show the updated code with the newly extracted functions.",
    "codeSelection": true,
    "codebase": false
  },
  "Replace Repeated Strings with Constants": {
    "prompt": "Identify repeated string literals within the code and refactor them into named constants for easier maintenance. Provide only the refactored code showing the new constants and their usage.",
    "codeSelection": true,
    "codebase": false
  },
  "Swap Callback Hell with Async/Await": {
    "prompt": "Look for nested callbacks that make the code hard to follow. Convert them into async/await patterns for better readability. Provide only the updated asynchronous functions.",
    "codeSelection": true,
    "codebase": false
  },
  "Use Short-Circuit Evaluations": {
    "prompt": "Identify instances of unnecessary if-checks and refactor them using logical AND (&&) or OR (||) operators for concise expressions. Provide only the updated code snippets.",
    "codeSelection": true,
    "codebase": false
  },
  "Merge Similar Functions": {
    "prompt": "Look for multiple functions that perform nearly identical tasks. Merge them into a single, more flexible function. Show only the merged function and its refactored usage.",
    "codeSelection": true,
    "codebase": false
  },
  "Convert Repeated useEffect Hooks": {
    "prompt": "Identify multiple useEffect hooks that handle similar logic. Consolidate them into a single effect or break them down into simpler specialized effects. Show only the updated hooks.",
    "codeSelection": true,
    "codebase": false
  },
  "Refactor Switch Statements to Lookups": {
    "prompt": "Check for switch statements that could be more concise by using an object or map-based lookup. Only provide the refactored code.",
    "codeSelection": true,
    "codebase": false
  },
  "Combine Multiple API Calls": {
    "prompt": "Identify places where multiple API calls are made sequentially but can be handled together or batched. Refactor to reduce network overhead. Show only the updated code.",
    "codeSelection": true,
    "codebase": false
  },
  "Replace Repeated Hooks with Custom Hook": {
    "prompt": "Where you see the same logic repeatedly in different components, extract that into a custom hook. Provide only the new custom hook and the updated references.",
    "codeSelection": true,
    "codebase": false
  },
  "Optimize Form Handling": {
    "prompt": "Locate any form handling logic that is repetitive or overly complex. Refactor it to use a streamlined approach, e.g. a single change handler. Provide only the updated code.",
    "codeSelection": true,
    "codebase": false
  },
  "Ensure Proper List Key Usage": {
    "prompt": "Look for dynamic lists in React that might not use stable keys or reuse indexes as keys. Update them to use unique, predictable keys. Only provide the updated list or map usage.",
    "codeSelection": true,
    "codebase": false
  },
  "Eliminate Redundant Imports": {
    "prompt": "In the selected code, spot and remove imports that are never used or duplicated. Show only the refactored import statements without commentary.",
    "codeSelection": true,
    "codebase": false
  },
  "Move Inline Event Handlers to Named Functions": {
    "prompt": "Check for event handlers defined inline in JSX. Refactor them into named functions for readability and easier debugging. Show only the updated code.",
    "codeSelection": true,
    "codebase": false
  },
  "Use React Profiler Insights": {
    "prompt": "Identify performance bottlenecks discovered through the React Profiler. Make small, targeted refactors based on those insights (e.g. memoizing heavy components). Show only the code changes.",
    "codeSelection": true,
    "codebase": false
  },
  "Separate Concerns with Utility Functions": {
    "prompt": "Look for logic that can be moved out of components into separate utility functions for better reusability. Provide only the updated code with the new utility functions.",
    "codeSelection": true,
    "codebase": false
  },
  "Promote Composition Over Inheritance": {
    "prompt": "Identify places where components rely too heavily on inheritance or repeated code. Refactor them to use composition patterns in React. Only show the refactored components.",
    "codeSelection": true,
    "codebase": false
  },
  "Implement Error Boundaries": {
    "prompt": "Locate areas of your React application where you might need error handling (e.g., crashing child components). Wrap them with an error boundary. Provide only the added error boundary code.",
    "codeSelection": true,
    "codebase": false
  },
  "Use Built-in Array Methods": {
    "prompt": "Check for manual loops or array transformations (like for-loops) that can be replaced with map, filter, or reduce for cleaner, more declarative code. Only show the updated array handling.",
    "codeSelection": true,
    "codebase": false
  },
  "Inline Simple Functions": {
    "prompt": "Find short helper functions that are used only once and consider inlining them directly within the component logic if it makes sense. Show only the inline changes.",
    "codeSelection": true,
    "codebase": false
  },
  "Consolidate Boolean Checks": {
    "prompt": "Seek out multiple consecutive Boolean checks or repeated if statements that can be combined into one clearer conditional. Only provide the consolidated checks in the updated code.",
    "codeSelection": true,
    "codebase": false
  },
  "Replace Repetitive Object Assignments": {
    "prompt": "Wherever you see repeated calls for object merging or updating, consider using the spread operator or a utility function to streamline. Show only the updated object manipulation code.",
    "codeSelection": true,
    "codebase": false
  },
  "Implement Debouncing or Throttling": {
    "prompt": "Identify event handlers that trigger frequent updates (e.g. window resize, scrolling, input changes) and refactor them to use debouncing or throttling. Show only the updated event handler code.",
    "codeSelection": true,
    "codebase": false
  },
  "Refactor Overly Verbose Variables": {
    "prompt": "Find variables whose names or structures are unnecessarily long and make them more concise without losing clarity. Only show the renamed variables in the updated code.",
    "codeSelection": true,
    "codebase": false
  },
  "Simplify Complex Return Statements": {
    "prompt": "Look for complex JSX returns or large function returns. Break them into smaller chunks or well-named variables before returning. Show only the updated return statements.",
    "codeSelection": true,
    "codebase": false
  },
  "Group Related State": {
    "prompt": "Identify separate states in a functional component that can be combined into a single useReducer or object state for easier handling. Only show the updated state logic.",
    "codeSelection": true,
    "codebase": false
  },
  "Use Context for Global State": {
    "prompt": "Identify global state that needs to be shared across multiple components and refactor it into a context provider. Show only the updated context provider code.",
    "codeSelection": true,
    "codebase": false
  }
}
