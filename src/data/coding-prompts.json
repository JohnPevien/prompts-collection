{
    "Smell Code": {
        "prompt": "Find code smells, potential bugs, and unhandled errors in my selected code. Create a list with the top five errors you can find, and include a short informative description and suggestion for each. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["code-smells", "debugging", "error-handling"]
    },
    "Improve variable names": {
        "prompt": "Suppose that you are writing code for a production level application which is shared by many developers in your team. Take the current code, and update the variable names so that it should improve the readability of the code and help the other developers maintain it without much difficulty. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["readability", "variable-names", "maintenance"]
    },
    "Refactor Large Components": {
        "prompt": "Identify any large React or Next.js components in the selected code. Break them into smaller, more focused components to improve readability, reusability, and testability. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "refactoring", "components"]
    },
    "Optimize Rendering": {
        "prompt": "Examine the code for unnecessary re-renders and recommend memoization strategies using React.memo or useMemo. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["performance", "react", "memoization"]
    },
    "Clean Up CSS": {
        "prompt": "Check for redundant or repetitive CSS classes and refactor them. Provide a list of changes made and why then ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["css", "refactoring", "markup"]
    },
    "Streamline State Management": {
        "prompt": "Review the selected code for overly complex state management and suggest refactors using React hooks, context, or more efficient libraries. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "state-management", "hooks"]
    },
    "Consolidate Repeated Logic": {
        "prompt": "Look for repeated logic patterns in the selected code and refactor them into shared helper functions or custom hooks. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["refactoring", "logic", "hooks"]
    },
    "Minimize Use of Inline Styles": {
        "prompt": "Identify any inline styles used within your React components and refactor them to use either SCSS or TailwindCSS utility classes for improved consistency. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["css", "react", "styling"]
    },
    "Reduce Prop Drilling": {
        "prompt": "Identify where props are being passed down multiple levels. Refactor the code to reduce prop drilling, for instance by using React Context or custom hooks. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "context", "props"]
    },
    "Enhance Type Definitions": {
        "prompt": "Review the code for missing or incomplete type definitions (such as TypeScript types or JSDoc annotations) and add or refine them for improved readability and safety. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["typescript", "types", "annotations"]
    },
    "Simplify Nested Conditionals": {
        "prompt": "Look for deeply nested if-else statements or switch blocks in the selected code. Rewrite them using early returns, logical operators, or helper functions for clarity. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["logic", "refactoring", "conditionals"]
    },
    "Use Ternary Operators": {
        "prompt": "Identify simple conditional checks that use verbose if-else blocks and refactor them into succinct ternary operators for readability. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["logic", "ternary-operators", "refactoring"]
    },
    "Convert Class Components to Functional": {
        "prompt": "Search for React class components in the selected code and refactor them to functional components where possible. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "functional-components", "refactoring"]
    },
    "Leverage Optional Chaining": {
        "prompt": "Replace manual checks for nested object properties with optional chaining (e.g., user?.profile?.address) to avoid errors and simplify code. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["optional-chaining", "javascript", "refactoring"]
    },
    "Implement Early Returns": {
        "prompt": "Identify sections of code that rely on deeply nested logic and refactor them to exit early when conditions arenâ€™t met. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["logic", "refactoring", "early-returns"]
    },
    "Adopt Strict Equality": {
        "prompt": "Locate any instances of loose equality (==) and replace them with strict equality (===) for better predictability. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["javascript", "equality", "best-practices"]
    },
    "Extract Complex Functions": {
        "prompt": "Find any overly complex or lengthy functions and extract parts of them into smaller, reusable helper functions. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["functions", "refactoring", "reusability"]
    },
    "Replace Repeated Strings with Constants": {
        "prompt": "Identify repeated string literals within the code and refactor them into named constants for easier maintenance. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["constants", "strings", "refactoring"]
    },
    "Swap Callback Hell with Async/Await": {
        "prompt": "Look for nested callbacks that make the code hard to follow. Convert them into async/await patterns for better readability. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["async-await", "callbacks", "refactoring"]
    },
    "Use Short-Circuit Evaluations": {
        "prompt": "Identify instances of unnecessary if-checks and refactor them using logical AND (&&) or OR (||) operators for concise expressions. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["logic", "short-circuit", "refactoring"]
    },
    "Merge Similar Functions": {
        "prompt": "Look for multiple functions that perform nearly identical tasks. Merge them into a single, more flexible function. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["functions", "refactoring", "optimization"]
    },
    "Convert Repeated useEffect Hooks": {
        "prompt": "Identify multiple useEffect hooks that handle similar logic. Consolidate them into a single effect or break them down into simpler specialized effects. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "useEffect", "optimization"]
    },
    "Refactor Switch Statements to Lookups": {
        "prompt": "Check for switch statements that could be more concise by using an object or map-based lookup. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["switch", "lookups", "optimization"]
    },
    "Combine Multiple API Calls": {
        "prompt": "Identify places where multiple API calls are made sequentially but can be handled together or batched. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["api", "performance", "optimization"]
    },
    "Replace Repeated Hooks with Custom Hook": {
        "prompt": "Where you see the same logic repeatedly in different components, extract that into a custom hook. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "hooks", "refactoring"]
    },
    "Optimize Form Handling": {
        "prompt": "Locate any form handling logic that is repetitive or overly complex. Refactor it to use a streamlined approach, e.g. a single change handler. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["forms", "react", "optimization"]
    },
    "Ensure Proper List Key Usage": {
        "prompt": "Look for dynamic lists in React that might not use stable keys or reuse indexes as keys. Update them to use unique, predictable keys. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "keys", "best-practices"]
    },
    "Eliminate Redundant Imports": {
        "prompt": "In the selected code, spot and remove imports that are never used or duplicated. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["imports", "cleanup", "optimization"]
    },
    "Move Inline Event Handlers to Named Functions": {
        "prompt": "Check for event handlers defined inline in JSX. Refactor them into named functions for readability and easier debugging. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "event-handling", "refactoring"]
    },
    "Use React Profiler Insights": {
        "prompt": "Identify performance bottlenecks discovered through the React Profiler. Make small, targeted refactors based on those insights. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "performance", "profiler"]
    },
    "Separate Concerns with Utility Functions": {
        "prompt": "Look for logic that can be moved out of components into separate utility functions for better reusability. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["utility-functions", "logic", "refactoring"]
    },
    "Promote Composition Over Inheritance": {
        "prompt": "Identify places where components rely too heavily on inheritance or repeated code. Refactor them to use composition patterns in React. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "composition", "patterns"]
    },
    "Implement Error Boundaries": {
        "prompt": "Locate areas of your React application where you might need error handling (e.g., crashing child components). Wrap them with an error boundary. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "error-handling", "boundaries"]
    },
    "Use Built-in Array Methods": {
        "prompt": "Check for manual loops or array transformations (like for-loops) that can be replaced with map, filter, or reduce for cleaner, more declarative code. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["arrays", "javascript", "optimization"]
    },
    "Inline Simple Functions": {
        "prompt": "Find short helper functions that are used only once and consider inlining them directly within the component logic if it makes sense. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["functions", "refactoring", "optimization"]
    },
    "Consolidate Boolean Checks": {
        "prompt": "Seek out multiple consecutive Boolean checks or repeated if statements that can be combined into one clearer conditional. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["boolean", "logic", "refactoring"]
    },
    "Replace Repetitive Object Assignments": {
        "prompt": "Wherever you see repeated calls for object merging or updating, consider using the spread operator or a utility function to streamline. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["objects", "refactoring", "optimization"]
    },
    "Implement Debouncing or Throttling": {
        "prompt": "Identify event handlers that trigger frequent updates (e.g. window resize, scrolling, input changes) and refactor them to use debouncing or throttling. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["performance", "events", "debounce-throttle"]
    },
    "Refactor Overly Verbose Variables": {
        "prompt": "Find variables whose names or structures are unnecessarily long and make them more concise without losing clarity. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["variables", "readability", "refactoring"]
    },
    "Simplify Complex Return Statements": {
        "prompt": "Look for complex JSX returns or large function returns. Break them into smaller chunks or well-named variables before returning. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["returns", "jsx", "refactoring"]
    },
    "Group Related State": {
        "prompt": "Identify separate states in a functional component that can be combined into a single useReducer or object state for easier handling. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["state-management", "react", "optimization"]
    },
    "Use Context for Global State": {
        "prompt": "Identify global state that needs to be shared across multiple components and refactor it into a context provider. ",
        "footNote": "Create a wrap-up and list all the changes made / suggested.",
        "category": "Coding",
        "tags": ["react", "context", "state-management"]
    }
}
